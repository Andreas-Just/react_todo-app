{"version":3,"sources":["components/Title/Title.js","components/Header/Header.js","components/ToDoItem/ToDoItem.js","components/ToDoList/ToDoList.js","components/Main/Main.js","constants.js","components/FilterList/FilterList.js","components/Footer/Footer.js","containers/ToDoContainer/ToDoContainer.js","App.js","index.js"],"names":["Title","title","className","defaultProps","Header","state","setTitle","target","value","slice","setState","validateForm","event","preventDefault","prevState","trim","props","addTodo","id","Date","completed","isEditable","render","cn","onSubmit","placeholder","type","onChange","onBlur","Component","ToDoItem","editValue","setEditValue","todo","onToggle","onDelete","onEdit","handleKeyPress","setEditedValue","checked","htmlFor","onDoubleClick","onClick","defaultValue","autoFocus","onKeyDown","ToDoList","items","onToggleTodo","onDeleteTodo","onEditTodo","map","item","key","Main","todos","visibleTodos","onToggleTodoCompleted","onDeleteCurrentTodo","onToggleAllCompleted","onEditCurrentTodo","isAllCompleted","every","FILTER_TYPES","all","active","FilterList","onFilter","selectedFilter","Object","values","filter","href","Footer","currentFilter","onClearCompleted","onSetFilter","completedTodos","length","some","ToDoContainer","JSON","parse","localStorage","getItem","deleteTodo","todoId","handleClearCompleted","toggleTodoCompleted","toggleAllCompleted","setFilter","filterTodos","setEditableState","setItem","stringify","this","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.56f41581.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Title.scss';\n\nexport const Title = ({ title }) => <h1 className=\"title\">{title}</h1>;\n\nTitle.propTypes = {\n  title: PropTypes.string,\n};\n\nTitle.defaultProps = {\n  title: 'Simple title',\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nexport class Header extends Component {\n  state = {\n    title: '',\n  };\n\n  setTitle = ({ target }) => {\n    const title = target.value.slice(0, 37);\n\n    this.setState({\n      title,\n    });\n  };\n\n  validateForm = (event) => {\n    event.preventDefault();\n\n    this.setState((prevState) => {\n      if (prevState.title.trim() === '') {\n        return '';\n      }\n\n      this.props.addTodo({\n        id: +new Date(),\n        title: prevState.title,\n        completed: false,\n        isEditable: false,\n      });\n\n      return {\n        title: '',\n      };\n    });\n  };\n\n  render = () => {\n    const { title } = this.state;\n\n    return (\n      <header className={cn('header')}>\n\n        <form onSubmit={this.validateForm}>\n          <input\n            className={cn('new-todo')}\n            placeholder=\"Click to add task\"\n            type=\"text\"\n            onChange={this.setTitle}\n            onBlur={this.validateForm}\n            value={title}\n          />\n        </form>\n      </header>\n    );\n  };\n}\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\n/* eslint-disable jsx-a11y/no-autofocus */\nexport class ToDoItem extends Component {\n  state = { editValue: '' }\n\n  setEditValue = ({ target }) => {\n    this.setState({\n      editValue: target.value,\n    });\n  }\n\n  render = () => {\n    const {\n      todo,\n      onToggle,\n      onDelete,\n      onEdit,\n      handleKeyPress,\n      setEditedValue,\n    } = this.props;\n    const { editValue } = this.state;\n\n    return (\n      <li className={cn(\n        todo.completed && 'completed',\n        todo.isEditable && 'editing',\n      )}\n      >\n        <div className={cn('view')}>\n          <input\n            type=\"checkbox\"\n            className={cn('toggle')}\n            onChange={onToggle}\n            checked={todo.completed}\n          />\n\n          <label\n            className={cn(todo.completed && 'checked')}\n            htmlFor={`todo-${todo.id}`}\n            onDoubleClick={onEdit}\n          >\n            {todo.title}\n          </label>\n\n          <button\n            type=\"button\"\n            className={cn('destroy')}\n            onClick={onDelete}\n          />\n        </div>\n\n        {todo.isEditable && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            defaultValue={todo.title}\n            autoFocus\n            onChange={this.setEditValue}\n            onKeyDown={\n              event => handleKeyPress(event, todo.id, editValue)\n            }\n            onBlur={\n              event => setEditedValue(event, todo.id, editValue)\n            }\n          />\n        )}\n      </li>\n    );\n  }\n}\n\nToDoItem.propTypes = {\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n    isEditable: PropTypes.bool,\n  }).isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { ToDoItem } from '../ToDoItem';\n\nexport const ToDoList = ({\n  items,\n  onToggleTodo,\n  onDeleteTodo,\n  onEditTodo,\n  handleKeyPress,\n  setEditedValue,\n}) => (\n  <ul className={cn('todo-list')}>\n    {items.map(item => (\n      <ToDoItem\n        key={item.id}\n        todo={item}\n        onToggle={() => onToggleTodo(item.id)}\n        onDelete={() => onDeleteTodo(item.id)}\n        onEdit={() => onEditTodo(item.id)}\n        handleKeyPress={handleKeyPress}\n        setEditedValue={setEditedValue}\n      />\n    ))}\n  </ul>\n);\n\nToDoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onToggleTodo: PropTypes.func.isRequired,\n  onDeleteTodo: PropTypes.func.isRequired,\n  onEditTodo: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { ToDoList } from '../ToDoList';\nimport './Main.scss';\n\nexport const Main = ({\n  todos,\n  visibleTodos,\n  onToggleTodoCompleted,\n  onDeleteCurrentTodo,\n  onToggleAllCompleted,\n  onEditCurrentTodo,\n  handleKeyPress,\n  setEditedValue,\n}) => {\n  const isAllCompleted = todos.every(todo => todo.completed);\n\n  return (\n    <section className=\"main\">\n      <label\n        className={cn('label', { 'label-checked-all': isAllCompleted })}\n        htmlFor=\"toggle-all\"\n      >\n        <input\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          onChange={onToggleAllCompleted}\n          checked={isAllCompleted}\n        />\n        Mark all as complete\n      </label>\n\n      <ToDoList\n        items={visibleTodos}\n        onToggleTodo={onToggleTodoCompleted}\n        onDeleteTodo={onDeleteCurrentTodo}\n        onEditTodo={onEditCurrentTodo}\n        handleKeyPress={handleKeyPress}\n        setEditedValue={setEditedValue}\n      />\n    </section>\n  );\n};\n\nMain.propTypes = {\n  visibleTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleteCurrentTodo: PropTypes.func.isRequired,\n  onToggleTodoCompleted: PropTypes.func.isRequired,\n  onToggleAllCompleted: PropTypes.func.isRequired,\n  onEditCurrentTodo: PropTypes.func.isRequired,\n  handleKeyPress: PropTypes.func.isRequired,\n  setEditedValue: PropTypes.func.isRequired,\n};\n","export const FILTER_TYPES = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FILTER_TYPES } from '../../constants';\n\nexport const FilterList = ({ onFilter, selectedFilter }) => (\n  <ul className={cn('filters')}>\n    {Object.values(FILTER_TYPES).map(filter => (\n      <li key={filter}>\n        <a\n          href={`#/${filter}`}\n          className={cn(selectedFilter === filter && 'selected')}\n          onClick={() => onFilter(filter)}\n        >\n          {filter}\n        </a>\n      </li>\n    ))}\n  </ul>\n);\n\nFilterList.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n  selectedFilter: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { FilterList } from '../FilterList';\n\nexport const Footer = (\n  { currentFilter, todos, onClearCompleted, onSetFilter },\n) => {\n  const completedTodos = todos.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className={cn('footer')}>\n      <span className={cn('todo-count')}>\n        {`${completedTodos} items left`}\n      </span>\n\n      <FilterList\n        onFilter={onSetFilter}\n        selectedFilter={currentFilter}\n      />\n\n      {todos.some(todo => todo.completed) && (\n        <button\n          type=\"button\"\n          className={cn('clear-completed')}\n          onClick={onClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  currentFilter: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n  onSetFilter: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Header } from '../../components/Header';\nimport { Main } from '../../components/Main';\nimport { Footer } from '../../components/Footer';\nimport { FILTER_TYPES } from '../../constants';\nimport './ToDoContainer.scss';\n\nexport class ToDoContainer extends Component {\n  state = {\n    todos: JSON.parse(localStorage.getItem('todos')) || [],\n    selectedFilter: FILTER_TYPES.all,\n  };\n\n  componentDidUpdate() {\n    localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n    }));\n  };\n\n  deleteTodo = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== todoId),\n    }));\n  };\n\n  handleClearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  };\n\n  toggleTodoCompleted = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== todoId) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }),\n    }));\n  };\n\n  toggleAllCompleted = () => {\n    this.setState((prevState) => {\n      if (prevState.todos.every(todo => todo.completed)) {\n        return {\n          todos: prevState.todos.map(todo => ({\n            ...todo,\n            completed: false,\n          })),\n        };\n      }\n\n      return {\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      };\n    });\n  };\n\n  setFilter = (filter) => {\n    this.setState({\n      selectedFilter: filter,\n    });\n  };\n\n  filterTodos = () => {\n    switch (this.state.selectedFilter) {\n      case FILTER_TYPES.active:\n        return this.state.todos.filter(todo => !todo.completed);\n      case FILTER_TYPES.completed:\n        return this.state.todos.filter(todo => todo.completed);\n      case FILTER_TYPES.all:\n        return this.state.todos.filter(todo => todo.id);\n      default:\n        return this.state.todos;\n    }\n  };\n\n  setEditableState = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return {\n            ...todo,\n            isEditable: false,\n          };\n        }\n\n        return {\n          ...todo,\n          isEditable: true,\n        };\n      }),\n    }));\n  };\n\n  handleKeyPress = (event, id, value) => {\n    if (event.key === 'Escape') {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          isEditable: false,\n        })),\n      }));\n    }\n\n    if (event.key === 'Enter') {\n      this.setEditedValue(event, id, value);\n    }\n  }\n\n  setEditedValue = (event, id, value) => {\n    if (!event.target.value) {\n      this.deleteTodo(id);\n    }\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id !== id) {\n          return todo;\n        }\n\n        return {\n          ...todo,\n          title: value || todo.title,\n          isEditable: false,\n        };\n      }),\n    }));\n  };\n\n  render = () => {\n    const { todos, selectedFilter } = this.state;\n    const visibleTodos = this.filterTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={this.addTodo}\n        />\n\n        {todos.length > 0 && (\n          <>\n            <Main\n              todos={todos}\n              visibleTodos={visibleTodos}\n              onToggleAllCompleted={this.toggleAllCompleted}\n              onToggleTodoCompleted={this.toggleTodoCompleted}\n              onDeleteCurrentTodo={this.deleteTodo}\n              onEditCurrentTodo={this.setEditableState}\n              handleKeyPress={this.handleKeyPress}\n              setEditedValue={this.setEditedValue}\n            />\n\n            <Footer\n              todos={todos}\n              onSetFilter={this.setFilter}\n              currentFilter={selectedFilter}\n              onClearCompleted={this.handleClearCompleted}\n            />\n          </>\n        )}\n\n      </section>\n    );\n  };\n}\n","import React from 'react';\nimport { Title } from './components/Title';\nimport { ToDoContainer } from './containers/ToDoContainer';\n\nfunction App() {\n  return (\n    <section className=\"todoapp\">\n      <Title title=\"Todo App\" />\n      <ToDoContainer />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}